version: 2.1

executors:
  default-machine:
    machine:
      image: ubuntu-2004:202201-02

jobs:
  build:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Install Subversion
          command: |
            sudo apt update
            sudo apt install -y subversion
      - run:
          name: Clone glibc
          command: |
            svn checkout --depth=empty svn://svn.archlinux.org/packages
            cd packages
            svn update glibc
      - run:
          name: Patch PKGBUILD
          working_directory: packages/glibc/repos/core-x86_64
          command: |
            patch -p2 -i ../../../../PKGBUILD-docs.patch
            patch -p2 -i ../../../../PKGBUILD-skip-tests.patch
            patch -p2 -i ../../../../PKGBUILD-force-uname.patch
            cp ../../../../force-uname.patch ./
      - run:
          name: makepkg
          working_directory: packages/glibc/repos/core-x86_64
          command: |
            docker run --rm --privileged -v "$(pwd):/source" -e PACKAGER -e GPG_SECRET_KEY -e GPG_PASSPHRASE archlinux bash -euo pipefail -c \
            '''
            pacman -Syu --noconfirm base-devel gnupg git gd lib32-gcc-libs python
            chmod g+w,o+w /source
            useradd -m user
            printenv GPG_SECRET_KEY | su -l -c "base64 -d | gpg --batch --import" user
            su -l -c "echo allow-preset-passphrase >> ~/.gnupg/gpg-agent.conf && gpg-connect-agent reloadagent /bye" user
            printenv GPG_PASSPHRASE | su -l -c "/usr/lib/gnupg/gpg-preset-passphrase --preset \$(gpg --list-secret-keys --with-colons | awk -F: \"{ if (\\\$1 == \\\"grp\\\") { print \\\$(NF-1) } }\" | tail -n 1)" user
            su -l -c "gpg --recv-keys 2E6F2933950726A85333D84EE28A22F9AF2FEC65 16792B4EA25340F8" user
            su -l -c "cd /source && PACKAGER=\"$PACKAGER\" makepkg --sign" user
            '''
      - run:
          name: Pick up artefacts
          command: |
            mkdir dist
            cp packages/glibc/repos/core-x86_64/*.pkg.tar.* -t dist
      - run:
          name: Compute checksums
          working_directory: dist
          command: |
            md5sum -- *.pkg.tar.* | tee md5sums.txt
            sha1sum -- *.pkg.tar.* | tee sha1sums.txt
            sha512sum -- *.pkg.tar.* | tee sha512sums.txt
            b2sum -- *.pkg.tar.* | tee b2sums.txt
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - dist

  test:
    executor: default-machine
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Smoke test - Installation of the packages should be aborted due to an intentional signature verification error
          command: |
            docker run --rm -v $(pwd)/dist:/root/dist archlinux bash -c \
            '''
            pacman -Sy && ! (pacman -U --noconfirm /root/dist/*.pkg.tar.zst)
            '''
      - run:
          name: Smoke test - Installation of the packages should be successful with signature verification
          command: |
            docker run --rm -v $(pwd)/dist:/root/dist archlinux bash -euo pipefail -c \
            '''
            GPG_KEY_ID=$(pacman -Qip /root/dist/*.pkg.tar.zst | grep Signatures | grep -o "[0-9A-Z]\{40\}" | sort -u)
            export GPG_KEY_ID

            pacman-key --init
            pacman-key -r "${GPG_KEY_ID}"
            pacman-key --lsign-key "${GPG_KEY_ID}"
            pacman -Sy
            pacman -U --noconfirm /root/dist/*.pkg.tar.zst
            echo
            pacman -Syu --noconfirm
            echo
            uname -a
            w
            echo
            pacman -Sy
            '''

  release:
    docker:
      - image: ubuntu:rolling
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y curl git zstd

            tmpPath=$(mktemp)
            curl -sSJL https://api.github.com/repos/cli/cli/releases/latest | grep -o 'https://github.com/cli/cli/releases/download/[^/]\{1,\}/gh_[^/]\{1,\}_linux_amd64.deb' | xargs curl -o $tmpPath -JL
            dpkg -i $tmpPath
      - attach_workspace:
          at: .
      - run:
          name: Compute release name
          command: |
            mkdir bench
            cd bench

            tar -xf ../dist/glibc-*.tar.zst

            echo "export RELEASE_NAME=\"$(awk '{ if ($1 == "pkgver") { print $NF } }' .PKGINFO)@${CIRCLE_BUILD_NUM}-${CIRCLE_SHA1:0:7}\"" | tee -a $BASH_ENV
      - run:
          name: Create a release
          command: |
            gh release create -R "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" -t "${RELEASE_NAME}" -n "" "${RELEASE_NAME}" dist/*

workflows:
  workflow:
    jobs:
      - build:
          context:
            - gpg-glibc-wsl
      - test:
          requires:
            - build
      - release:
          context:
            - github
          requires:
            - test
          filters:
            branches:
              only:
                - main
